#version 330 core

// Interpolated values from the vertex shaders
in vec3 fragmentColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

//uniform vec3 LightPosition_worldspace;

void main(){

	vec3 LightColor = vec3(1, 1, 1);
	float LightPower = 1000000.0f;

	vec3 LightPosition_worldspace = vec3(0, 1100, 0);

	vec3 MaterialDiffuseColor = fragmentColor;
	vec3 MaterialAmbientColor = vec3(0.4, 0.4, 0.4) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

	float distance = length(LightPosition_worldspace - Position_worldspace);

	vec3 n = normalize(Normal_cameraspace);
	vec3 l = normalize(LightDirection_cameraspace);
	float cosTheta = clamp(dot(n, l), 0, 1);

	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l, n);

	float cosAlpha = clamp(dot(E, R), 0, 1);

	color = MaterialAmbientColor
		  + MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance)
		  + MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance*distance);

}
